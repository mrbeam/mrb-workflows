name: Build
on:
  workflow_call:
    inputs:
      python_v:
        description: "Python version needed to run the code, eg. 3.10.6"
        default: 3.10.6
        required: false
        type: string

env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  latestRelease:
    name: Latest Release
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.latestTag.outputs.tag }}
    steps:
      - name: Print GitHub event action
        id: triggerEvent
        run: |
          echo "${{ github.event.action }}"
          echo "${{ github.event }}"
          echo "${{ github.event.pull_request }}"
          echo "${{ github.event.push.branches }}"
          echo "${{ env.GITHUB_REF_NAME }}"
      - uses: oprypin/find-latest-tag@v1
        with:
          repository: ${{ github.repository }}
          releases-only: true
          token: ${{ env.PERSONAL_ACCESS_TOKEN }}
        id: latestTag

      - run: echo "Repository is at version ${{ steps.latestTag.outputs.tag }}"
#
#      - name: It's a PR
#        if: ${{ github.event_name == 'pull_request' }}
#        run: echo This event is a pull request.
#      - name: It's a push
#        if: ${{ github.event_name == 'push' }}
#        run: echo This event is a push.

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: latestRelease
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Python ${{ inputs.python_v }}
        uses: actions/setup-python@v2
        with:
            python-version: ${{ inputs.python_v }}
      - uses: actions/cache@v3  # Cache dependencies to speed up process
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install pylint pytest pytest-cov pytest-html
            if test -f "requirements-dev.txt"
            then
              pip install -r requirements-dev.txt
            fi
      - name: Run pytest
        id: pytest
        run: |
          pytest -v  --cov --cov-report=xml --cov-report=html --junit-xml=xunit-result.xml --html=pytest-report.html
      - name: Analysing the code with pylint
        continue-on-error: true
        if: always()
        run: |
          pylint --ignore-patterns=tests/* --exit-zero **/*.py  2>&1 | tee pylint-report.log
      - name: SonarCloud Scan
        if: always()
        uses: SonarSource/sonarcloud-github-action@master
        with:
          # This will fail the build if the quality gate is not met
          args: >
            -Dsonar.qualitygate.wait=true
            -Dsonar.projectVersion=${{ needs.latestRelease.outputs.latest_release }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - uses: actions/upload-artifact@v3
        with:
          name: pylint-report.log
          path: ./pylint-report.log
      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: htmlcov
      - uses: actions/upload-artifact@v3
        with:
          name: pytest-report
          path: pytest-report.html
#
#  format:
#    name: Check formatting
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - name: Set up Python ${{ inputs.python_v }}
#        uses: actions/setup-python@v2
#        with:
#            python-version: ${{ inputs.python_v }}
#      - name: Install pre-commit
#        run: |
#          python -m pip install --upgrade pip
#          pip install pre-commit
#          pre-commit install
#      - name: Run pre-commit (all files)
#        run: |
#          if test -f ".pre-commit-config.yaml"
#          then
#            pre-commit run --all-files --show-diff-on-failure
#          else
#            echo "::warning::No pre-commit config available"
#          fi
