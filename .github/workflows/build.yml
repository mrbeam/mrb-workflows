name: Build
on:
  workflow_call:
    inputs:
      python_v:
        description: "Python version needed to run the code, eg. 3.10.6"
        default: 3.10.6
        required: false
        type: string

env:
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up Python ${{ inputs.python_v }}
        uses: actions/setup-python@v2
        with:
            python-version: ${{ inputs.python_v }}
      - uses: actions/cache@v3  # Cache dependencies to speed up process
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install pylint pytest pytest-cov pytest-html
            if test -f "requirements-dev.txt"
            then
              pip install -r requirements-dev.txt
            fi
      - name: Run pytest
        id: pytest
        continue-on-error: true  # For now, we don't fail the build, but will show an error
        run: |
          pytest -v  --cov --cov-report=xml --cov-report=html --junit-xml=xunit-result.xml --html=pytest-report.html
      - name: Tests failed
        run: echo "::error::Unit tests are failing"
        if: always() && steps.pytest.outcome == 'failure'

      # This step fails with error: ./octoprint_mrbeam permission denied
      #- name: GitHub Action for pylint
      #  uses: cclauss/GitHub-Action-for-pylint@0.7.0
      #  with:
      #    args: '**/*.py'
      #  if: always()
      #  continue-on-error: true
      - name: Analysing the code with pylint
        continue-on-error: true
        if: always()
        run: |
          pylint --ignore-patterns=tests/* --exit-zero **/*.py  2>&1 | tee pylint-report.log
      - name: SonarCloud Scan
        if: always()
        uses: SonarSource/sonarcloud-github-action@master
      #  with:
      #    args: >
      #      -Dsonar.verbose=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - uses: actions/upload-artifact@v3
        with:
          name: pylint-report.log
          path: ./pylint-report.log
      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: htmlcov
      - uses: actions/upload-artifact@v3
        with:
          name: pytest-report
          path: pytest-report.html

  format:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up Python ${{ inputs.python_v }}
        uses: actions/setup-python@v2
        with:
            python-version: ${{ inputs.python_v }}
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install
      - name: Run pre-commit (all files)
        run: |
          if test -f ".pre-commit-config.yaml" 
          then
            pre-commit run --all-files --show-diff-on-failure
          else
            echo "::warning::No pre-commit config available"
          fi
